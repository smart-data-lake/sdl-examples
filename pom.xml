<!--
  ~ Smart Data Lake Examples - Build your data lake the smart way.
  ~
  ~ Copyright Â© 2019 ELCA Informatique SA (<https://www.elca.ch>)
  ~
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published by
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program. If not, see <http://www.gnu.org/licenses/>.
  -->
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<!--
	  By setting sdl-parent as parent you get proper dependency management for Spark and predefined plugin management
	  Alternatively you could import Spark dependency management from sdl-parent with scope=import (or also directly from spark-parent),
	  and need to copy all version properties from sdl-parent.pom into this pom.
	-->
	<parent>
		<groupId>io.smartdatalake</groupId>
		<artifactId>sdl-parent</artifactId>
		<!--
		  Set the smartdatalake version to use here.
		  If version cannot be resolved, make sure maven central repository is defined in settings.xml and the corresponding profile activated.
		  If version in IntelliJ still cannot be resolved, a restart of IntelliJ might help!
		-->
		<version>2.5.2</version>
	</parent>

	<artifactId>sdl-examples</artifactId>

	<name>Smart Data Lake Examples</name>

	<properties>
		<!-- default scala version - use predefined maven profiles to override -->
		<scala.minor.version>2.12</scala.minor.version>
		<scala.version>${scala.minor.version}.18</scala.version>
		<!-- must match Python arrow version defined in requirements.txt -->
		<!-- see also sdl-parent pom.xml for arrow version that spark is built against -->
		<arrow.version>7.0.0</arrow.version>
		<!-- additional cmd line properties for java 17, set through automatically through profile jvm17 -->
		<jvm17.opens></jvm17.opens>
	</properties>

	<profiles>
		<profile>
			<id>jdk17</id>
			<activation>
				<jdk>[17, ]</jdk>
			</activation>
			<properties>
				<jvm17.opens>--add-opens=java.base/sun.nio.ch=ALL-UNNAMED</jvm17.opens>
			</properties>
		</profile>
	</profiles>

	<repositories>
		<repository>
			<id>sonatype-snapshot</id>
			<name>Sonatype Snapshots</name>
			<url>https://oss.sonatype.org/content/repositories/snapshots/</url>
		</repository>
	</repositories>

	<build>
		<sourceDirectory>src/main/scala</sourceDirectory>
		<outputDirectory>target</outputDirectory>
		<plugins>
			<!-- Compiles Scala sources. -->
			<plugin>
				<groupId>net.alchim31.maven</groupId>
				<artifactId>scala-maven-plugin</artifactId>
			</plugin>

			<!-- Copies files in resources folders to target folder. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
			</plugin>

			<!-- Creates the jar without dependencies -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
			</plugin>

			<!-- Checks for declared but unused and undeclared but used dependencies in the verify stage -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
			</plugin>

			<!-- check for dependency version conflicts -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
			</plugin>

			<!-- Executes examples -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>3.1.0</version>
				<executions>
					<execution>
						<id>all</id>
						<phase>verify</phase>
						<goals>
							<goal>exec</goal>
						</goals>
						<configuration>
							<arguments>
								<argument>${jvm17.opens}</argument>
								<argument>-classpath</argument>
								<classpath/>
								<argument>io.smartdatalake.app.LocalSmartDataLakeBuilder</argument>
								<argument>--feed-sel</argument>
								<argument>.*</argument>
								<argument>--config</argument>
								<argument>${project.build.directory}</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
				<configuration>
					<executable>java</executable>
					<workingDirectory>${project.build.directory}</workingDirectory>
				</configuration>
			</plugin>

		</plugins>
	</build>

	<dependencies>

		<!-- smartdatalakebuilder -->
		<dependency>
			<groupId>io.smartdatalake</groupId>
			<artifactId>sdl-core_${scala.minor.version}</artifactId>
			<version>${project.parent.version}</version>
		</dependency>
		<dependency>
			<groupId>io.smartdatalake</groupId>
			<artifactId>sdl-deltalake_${scala.minor.version}</artifactId>
			<version>${project.parent.version}</version>
		</dependency>

		<!-- override scope for spark dependencies to include/exclude them correctly for the fat-jar -->
		<!-- note that the corresponding profile defining spark.deps.scope is inherited from sdl-parent -->
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-core_${scala.minor.version}</artifactId>
			<version>${spark.version}</version>
			<scope>${spark.deps.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-sql_${scala.minor.version}</artifactId>
			<version>${spark.version}</version>
			<scope>${spark.deps.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-hive_${scala.minor.version}</artifactId>
			<version>${spark.version}</version>
			<scope>${spark.deps.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-catalyst_${scala.minor.version}</artifactId>
			<version>${spark.version}</version>
			<scope>${spark.deps.scope}</scope>
		</dependency>
		<dependency>
			<groupId>org.apache.spark</groupId>
			<artifactId>spark-avro_${scala.minor.version}</artifactId>
			<version>${spark.version}</version>
			<scope>${spark.deps.scope}</scope>
		</dependency>

		<dependency>
			<groupId>io.smartdatalake</groupId>
			<artifactId>sdl-core_${scala.minor.version}</artifactId>
			<version>${project.parent.version}</version>
			<classifier>test-jar</classifier>
			<scope>test</scope>
		</dependency>

	</dependencies>

</project>
